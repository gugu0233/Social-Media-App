/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

public class App {
    public App() {/* compiled code */}

    static class Post {
        int post_id;
        String post_text;
        String post_date;
        String username;

        public Post(int post_id, String post_text, String post_date, String username) {
            this.post_id = post_id;
            this.post_text = post_text;
            this.post_date = post_date;
            this.username = username;
        }
    }

    private static Map<String, Integer> countFollowers(String filePath) {
        Map<String, Integer> followersCount = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 1) {
                    String username = parts[0].trim();
                    followersCount.put(username, followersCount.getOrDefault(username, 0) + 1);
                }
            }
        } catch (IOException e) {
            System.out.println("Error");
        }
        return followersCount;
    }

    private static int calculateNumberOfLikes(int postId, Map<Integer, Integer> numberCount) {
        int numberOfLikes = 0;
        numberOfLikes = numberCount.getOrDefault(postId, 0);
        return numberOfLikes;
    }

    private static Map<Integer, Integer> getDigitCounts(String filePath) {
        Map<Integer, Integer> digitCounts = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                int digit = Integer.parseInt(line.trim());
                digitCounts.put(digit, digitCounts.getOrDefault(digit, 0) + 1);
            }
        } catch (IOException | NumberFormatException e) {
            System.out.println("Error");
        }
        return digitCounts;
    }

    private static Map<Integer, Integer> getDigitCountsforCSV(String filePath) {
        Map<Integer, Integer> digitCounts = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] lineFile = line.split(",");
                int digit = Integer.parseInt(lineFile[1].trim());
                digitCounts.put(digit, digitCounts.getOrDefault(digit, 0) + 1);
            }
        } catch (IOException | NumberFormatException e) {
            System.out.println("Error");
        }

        return digitCounts;
    }

    private static void deleteLinesBySecondField(String fileName, String valueToDelete) {
        try {
            File inputFile = new File(fileName);
            File tempFile = new File("temp.csv");
            PrintWriter writer = new PrintWriter(tempFile);
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                String[] fields = currentLine.split(",");
                if (fields.length > 1 && fields[1].trim().equals(valueToDelete)) {
                    continue;
                }
                writer.println(currentLine);
            }
            writer.close();
            reader.close();

            if (!inputFile.delete()) {
                System.out.println("err");
                return;
            }

            if (!tempFile.renameTo(inputFile)) {
                System.out.println("err");
            }

        } catch (IOException e) {
            System.out.println("err");
        }
    }

    private static List<String[]> readCSV(String filePath) {
        List<String[]> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                data.add(values);
            }
        } catch (IOException e) {
            System.out.println("Error");
        }
        return data;
    }

    private static void deleteLinesStartingWith(String fileName, String wordToDelete) {
        try {
            File inputFile = new File(fileName);
            File tempFile = new File("temp.txt");
            PrintWriter writer = new PrintWriter(tempFile);
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (!currentLine.trim().startsWith(wordToDelete)) {
                    writer.println(currentLine);
                }
            }

            writer.close();
            reader.close();
            if (!inputFile.delete()) {
                System.out.println("err");
                return;
            }

            if (!tempFile.renameTo(inputFile)) {
                System.out.println("err");
            }

        } catch (IOException e) {
            System.out.println("Error");
        }
    }

    private static int getId(String username) {  // functie de generare a id-ului
        int max = 0;
        try (BufferedReader br = new BufferedReader(new FileReader("postId.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] cuvinte = line.split(",");
                if (cuvinte.length == 3) {
                    int currentId = Integer.parseInt(cuvinte[1]);
                    if (currentId > max) {
                        max = currentId;
                    }
                }
            }
        } catch (IOException | NumberFormatException e) {
            System.out.println("Error");
        }
        return max + 1;
    }

    private static void writePostIdToFile(String username, int id, String text,String fileName) {
        try (FileWriter fw = new FileWriter(fileName, true);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            out.println(username + "," + id + "," + text);
        } catch (IOException e) {
            System.out.println("Error");
        }
    }

    public static void cleanAll(String fileName) {
        try (FileWriter fileWriter = new FileWriter(fileName, false)) {
            fileWriter.write("");
        } catch (IOException e) {
            System.err.println("err " + e.getMessage());
        }
    }

    public static void main(java.lang.String[] strings) {
        // test dummy
        if (strings == null || strings.length == 0 || strings[0] == null) {
            System.out.println("Hello world!");
            return;
        }
        // initializare argumente
        String command = strings[0];
        String[] words;
        String username = null;
        String password = null;
        String text = null;
        String id = null;
        String username1 = null;
        String commentId = null;

        // gasire argumente in comanda
        for (int i = 1; i < strings.length; i++) {
            if (strings[i].startsWith("-u ")) {
                words = strings[i].split(" ");
                username = words[1].substring(1, words[1].length() - 1);
            } else if (strings[i].startsWith("-p ")) {
                words = strings[i].split(" ");
                password = words[1].substring(1, words[1].length() - 1);
            } else if (strings[i].startsWith("-text")) {
                int startIdx = strings[i].indexOf("'");
                int endIdx = strings[i].lastIndexOf("'");
                if (startIdx != -1 && endIdx != -1 && startIdx < endIdx) {
                    text = strings[i].substring(startIdx + 1, endIdx);
                }
            } else if (strings[i].startsWith("-id")) {
                int startIdx = strings[i].indexOf("'");
                int endIdx = strings[i].lastIndexOf("'");
                if (startIdx != -1 && endIdx != -1 && startIdx < endIdx) {
                    id = strings[i].substring(startIdx + 1, endIdx);
                }
            } else if (strings[i].startsWith("-username")) {
                int startIdx = strings[i].indexOf("'");
                int endIdx = strings[i].lastIndexOf("'");
                if (startIdx != -1 && endIdx != -1 && startIdx < endIdx) {
                    username1 = strings[i].substring(startIdx + 1, endIdx);
                }
            } else if (strings[i].startsWith("-post-id")) {
                int startIdx = strings[i].indexOf("'");
                int endIdx = strings[i].lastIndexOf("'");
                if (startIdx != -1 && endIdx != -1 && startIdx < endIdx) {
                    id = strings[i].substring(startIdx + 1, endIdx);
                }
            } else if (strings[i].startsWith("-comment-id")) {
                int startIdx = strings[i].indexOf("'");
                int endIdx = strings[i].lastIndexOf("'");
                if (startIdx != -1 && endIdx != -1 && startIdx < endIdx) {
                    id = strings[i].substring(startIdx + 1, endIdx);
                }
            }
        }

        boolean userExists = false;
        boolean user1Exists = false;
        String passFile = null;
        String idFile = null;
        int ok = 1;

        if (command.equals("-cleanup-all")) {
            cleanAll("users.csv");
            cleanAll("postId.csv");
            cleanAll("follow.csv");
            cleanAll("commentedPosts.csv");
            cleanAll("likedComments.csv");
            cleanAll("likedPosts.csv");
            cleanAll("likes.txt");
            cleanAll("getmostliked.csv");
            cleanAll("getmostcommented.csv");
            cleanAll("likesforposts.txt");
            cleanAll("likesforcomments.txt");
        }

        if (command.equals("-create-user")) {
            if (username == null) { // verificare username
                System.out.println("{ 'status' : 'error', 'message' : 'Please provide username'}");
            }
            if (password == null && strings.length > 1) { // verificare parola
                System.out.println("{ 'status' : 'error', 'message' : 'Please provide password'}");
            }
            if (username != null && password != null) { // daca utilizatorul a introdus ambele, se verifica fisierul de useri
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(","); // se desparte fiecare linie din fisier in functie de virgula
                        if (lineFile.length >= 2) {
                            if (username.equals(lineFile[0])) { // lineFile[0] este username din fisier
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (userExists) { // daca username exista deja
                    System.out.println("{ 'status' : 'error', 'message' : 'User already exists'}");
                } else { // altfel, scriu datele in fisier
                    try (FileWriter fw = new FileWriter("users.csv", true);
                         BufferedWriter bw = new BufferedWriter(fw);
                         PrintWriter out = new PrintWriter(bw)) {
                        out.println(username + "," + password);
                    } catch (IOException e) {
                        System.out.println("Error");
                    }
                    // dupa introducerea credentialelor in fisier, se afiseaza mesajul corespunzator
                    System.out.println("{ 'status' : 'ok', 'message' : 'User created successfully'}");
                }
            }
        }

        if (command.equals("-create-post")) {
            if (password == null || username == null) // daca utilizatorul nu a introdus credentialele
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) { // altfel, se deschide fisierul pentru a verifica datele primite
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(","); // se desparte linia in functie de virgula
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1]; // lineFile[1]  este password din fisier
                            if (username.equals(lineFile[0])) { // lineFile[0] este username din fisier
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) { // daca username nu exista
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else { // daca username exista, se verific daca parola este corecta
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (text == null) { // se verifica textul
                        System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                    } else if (text.length() > 300) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Post text length exceeded'}");
                    } else { // daca autentificarea a fost realizata, se scriu in fisiere datele postarii
                        int idF = getId(username);
                        writePostIdToFile(username, idF, text,"postId.csv");
                        writePostIdToFile(username, idF, text, "getmostcommented.csv");
                        writePostIdToFile(username, idF, text,"getmostliked.csv");
                        System.out.println("{ 'status' : 'ok', 'message' : 'Post added successfully'}");
                    }
                }
            }
        }

        if (command.equals("-delete-post-by-id")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (id != null) {
                    try (BufferedReader br = new BufferedReader(new FileReader("postId.csv"))) {
                        String line;
                        boolean found = false;
                        while ((line = br.readLine()) != null) {
                            String[] lineFile = line.split(",");
                            if (id.equals(lineFile[1])) { // daca id ul se gaseste in fisier sterg postarea
                                deleteLinesBySecondField("postId.csv", id);
                                System.out.println("{ 'status' : 'ok', 'message' : 'Post deleted successfully'}");
                                found = true;
                                break;
                            }
                        }
                        if (!found) { // nu l am gasit deci este invalid
                            System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                        }
                    } catch (IOException | NumberFormatException e) {
                        System.out.println("Error");
                    }
                }
            }
        }

        if (command.equals("-follow-user-by-username")) {
            if (username == null || password == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (username1 == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No username to follow was provided'}");
                    } else if (username1 != null) { // daca e totul ok, caut username de urmarit(username1) in users pt a verifica daca e valid
                        try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    passFile = lineFile[1]; // password din fisier
                                    // daca username exista in fisier
                                    if (username1.equals(lineFile[0])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) { // daca username1 nu exista
                            System.out.println(
                                    "{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                        } else { // daca exista , deschid follow.csv ca sa vad daca a mai fost urmarit, adica daca exista deja in fisier
                            try (BufferedReader br = new BufferedReader(new FileReader("follow.csv"))) {
                                String line;
                                while ((line = br.readLine()) != null) {
                                    String[] lineFile = line.split(",");
                                    if (lineFile.length >= 2) {
                                        if (username1.equals(lineFile[0]) && username.equals(lineFile[1])) { // exista
                                            ok = 0;
                                            break;
                                        }
                                    }
                                }
                            } catch (IOException e) {
                                System.out.println("Error");
                            }

                            if (ok == 0) // daca exista deja, a mai fost urmarit
                                System.out.println("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                            else { // altfel, nu a mai fost urmarit deci il adaug in fisier plus afisare mesaj
                                try (FileWriter fw = new FileWriter("follow.csv", true);
                                     BufferedWriter bw = new BufferedWriter(fw);
                                     PrintWriter out = new PrintWriter(bw)) {
                                    out.println(username1 + "," + username);
                                } catch (IOException e) {
                                    System.out.println("Error");
                                }
                                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            }
                        }
                    }
                }
            }
        }
        if (command.equals("-unfollow-user-by-username")) {
            if (username == null || password == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1]; // password din fisier
                            // daca username exista in fisier
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) { // daca username nu exista
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else { // daca username exista, verific daca parola este la fel
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (username1 == null) { // verific username1 daca l am primit in comanda
                        System.out.println("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}");
                    } else if (username1 != null) {
                        try (BufferedReader br = new BufferedReader(new FileReader("follow.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    passFile = lineFile[1];
                                    if (username1.equals(lineFile[0])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}");
                        } else {
                            deleteLinesStartingWith("follow.csv", username1);
                            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                        }
                    }
                }
            }
        }
        if (command.equals("-like-post")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (id == null) { // verific id-ul;
                        System.out.println(
                                "{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}");
                    } else if (id != null) {
                        try (BufferedReader br = new BufferedReader(new FileReader("postId.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    idFile = lineFile[1];
                                    if (id.equals(lineFile[1])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) { // daca username1 nu exista
                            System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
                            try (FileWriter fw = new FileWriter("likes.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                            try (FileWriter fw = new FileWriter("likesforposts.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                        } else {
                            try (FileWriter fw = new FileWriter("likedPosts.csv", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(username + "," + id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                            deleteLinesBySecondField("postId.csv", id);
                            System.out.println(
                                    "{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            try (FileWriter fw = new FileWriter("likes.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                            try (FileWriter fw = new FileWriter("likesforposts.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                        }
                    }
                }
            }
        }
        if (command.equals("-unlike-post")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (id == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}");
                    } else if (id != null) {
                        try (BufferedReader br = new BufferedReader(new FileReader("likedPosts.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    idFile = lineFile[1];
                                    if (id.equals(lineFile[1])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");
                        } else {
                            deleteLinesStartingWith("likedPosts.csv", username);
                            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                        }
                    }
                }
            }
        }
        if (command.equals("-comment-post")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (text == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                    } else if (text.length() > 300) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Comment text length exceeded'}");
                    } else if (id != null) {
                        try (FileWriter fw = new FileWriter("commentedPosts.csv", true);
                             BufferedWriter bw = new BufferedWriter(fw);
                             PrintWriter out = new PrintWriter(bw)) {
                            out.println(username + "," + id + "," + text);
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        System.out.println("{ 'status' : 'ok', 'message' : 'Comment added successfully'}");
                    }
                }
            }
        }
        if (command.equals("-like-comment")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (id == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}");
                    } else if (id != null) {
                        try (BufferedReader br = new BufferedReader(new FileReader("commentedPosts.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    if (id.equals(lineFile[1])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                            try (FileWriter fw = new FileWriter("likes.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                            try (FileWriter fw = new FileWriter("likesforcomments.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                        } else {
                            try (FileWriter fw = new FileWriter("likedComments.csv", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(username + "," + id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                            deleteLinesBySecondField("commentedPosts.csv", id);
                            System.out.println(
                                    "{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            try (FileWriter fw = new FileWriter("likes.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                            try (FileWriter fw = new FileWriter("likesforcomments.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                        }
                    }
                }
            }
        }
        if (command.equals("-unlike-comment")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (id == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}");
                    } else if (id != null) {
                        try (BufferedReader br = new BufferedReader(new FileReader("likedComments.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    idFile = lineFile[1];
                                    if (id.equals(lineFile[1])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                        } else {
                            deleteLinesStartingWith("likedPosts.csv", username);
                            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                        }
                    }
                }
            }
        }
        if (command.equals("-delete-comment-by-id")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (id == null) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                } else {
                    try (BufferedReader br = new BufferedReader(new FileReader("commentedPosts.csv"))) {
                        String line;
                        while ((line = br.readLine()) != null) {
                            String[] lineFile = line.split(",");
                            if (lineFile.length >= 2) {
                                idFile = lineFile[1];
                                if (id.equals(lineFile[1])) {
                                    user1Exists = true;
                                    break;
                                }
                            }
                        }
                    } catch (IOException e) {
                        System.out.println("Error");
                    }
                    if (!user1Exists) {
                        System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                    } else {
                        boolean exists = false;
                        try (BufferedReader br = new BufferedReader(new FileReader("commentedPosts.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    if (username.equals(lineFile[0])) {
                                        exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                        } else
                            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                    }
                }
            }
        }
        if (command.equals("-get-followings-posts")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    List<String> linesWithIds = new ArrayList<>();
                    try (BufferedReader br = new BufferedReader(new FileReader("postid.csv"))) {
                        String line;
                        int ID = 1;
                        List<Post> posts = new ArrayList<>();
                        // Citesc liniile din fisier si le stochez cu id-ul in lista
                        while ((line = br.readLine()) != null) {
                            String[] parts = line.split(",");
                            if (parts.length >= 3) {
                                String usernameB = parts[0].trim();
                                int post_id = ID;
                                String post_text = parts[2].trim();
                                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");  // data curenta
                                String post_date = dateFormat.format(new Date());

                                posts.add(new Post(post_id, post_text, post_date, usernameB));
                            }
                            ID++;
                        }
                        Collections.reverse(posts);  //inversez postarile

                        StringBuilder jsonBuilder = new StringBuilder();
                        jsonBuilder.append("{'status':'ok','message': [");
                        for (Post post : posts) {
                            jsonBuilder.append("{'post_id':'").append(post.post_id).append("',")
                                    .append("'post_text':'").append(post.post_text).append("',")
                                    .append("'post_date':'").append(post.post_date).append("',")
                                    .append("'username':'").append(post.username).append("'},");
                        }

                        //stergere virgula
                        if (jsonBuilder.charAt(jsonBuilder.length() - 1) == ',') {
                            jsonBuilder.deleteCharAt(jsonBuilder.length() - 1);
                        }

                        jsonBuilder.append("]}");

                        System.out.println(jsonBuilder);

                    } catch (IOException e) {
                        System.out.println("Error");
                    }
                }
            }
        }

        if (command.equals("-get-user-posts")) {
            if (username == null || password == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (username1 == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}");
                    } else {
                        try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    passFile = lineFile[1];
                                    if (username1.equals(lineFile[0])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                        } else {
                            try (BufferedReader br = new BufferedReader(new FileReader("follow.csv"))) {
                                String line;
                                if ((line = br.readLine()) != null) {
                                    ok = 0;
                                    while ((line = br.readLine()) != null) {
                                        String[] lineFile = line.split(",");
                                        if (lineFile.length >= 2) {
                                            if (username1.equals(lineFile[0])) {
                                                ok = 0;
                                                break;
                                            }
                                        }
                                    }
                                }
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                            if (ok == 1)
                                System.out.println("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                            else {
                                List<String> linesWithIds = new ArrayList<>();
                                try (BufferedReader br = new BufferedReader(new FileReader("postid.csv"))) {
                                    String line;
                                    int ID = 1;
                                    List<Post> posts = new ArrayList<>();

                                    while ((line = br.readLine()) != null) {
                                        String[] parts = line.split(",");
                                        if (parts.length >= 3) {
                                            String usernameB = parts[0].trim();
                                            int post_id = ID;
                                            String post_text = parts[2].trim();
                                            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                                            String post_date = dateFormat.format(new Date());

                                            posts.add(new Post(post_id, post_text, post_date, usernameB));
                                        }
                                        ID++;
                                    }

                                    Collections.reverse(posts);

                                    StringBuilder jsonBuilder = new StringBuilder();
                                    jsonBuilder.append("{'status':'ok','message': [");
                                    for (Post post : posts) {
                                        jsonBuilder.append("{'post_id':'").append(post.post_id).append("',")
                                                .append("'post_text':'").append(post.post_text).append("',")
                                                .append("'post_date':'").append(post.post_date).append("'},");
                                    }
                                    if (jsonBuilder.charAt(jsonBuilder.length() - 1) == ',') {
                                        jsonBuilder.deleteCharAt(jsonBuilder.length() - 1);
                                    }

                                    jsonBuilder.append("]}");
                                    System.out.println(jsonBuilder);

                                } catch (IOException e) {
                                    System.out.println("Error");
                                }
                            }
                        }
                    }
                }
            }
        }
        if (command.equals("-get-following")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    List<String> following = new ArrayList<>();
                    try (BufferedReader br = new BufferedReader(new FileReader("follow.csv"))) {
                        String line;
                        while ((line = br.readLine()) != null) {
                            String[] lineFile = line.split(",");
                            if (lineFile.length >= 2 && username.equals(lineFile[1])) {
                                String firstWord = lineFile[0].trim();
                                following.add(firstWord); // adaug primul element in lista
                            }
                        }
                    } catch (IOException e) {
                        System.out.println("Error");
                    }
                    System.out.print("{'status':'ok','message': [");
                    for (int i = 0; i < following.size(); i++) {
                        System.out.print("'" + following.get(i) + "'");
                        if (i < following.size() - 1) {
                            System.out.print(",");
                        }
                    }
                    System.out.println("]}");
                }
            }
        }
        if (command.equals("-get-followers")) {
            if (username == null || password == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (username1 == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No username to list followers was provided'}");
                    } else {
                        try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    passFile = lineFile[1];
                                    if (username1.equals(lineFile[0])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The username to list followers was not valid'}");
                        } else {
                            try (BufferedReader br = new BufferedReader(new FileReader("follow.csv"))) {
                                String line;
                                while ((line = br.readLine()) != null) {
                                    String[] lineFile = line.split(",");
                                    if (lineFile.length >= 2) {
                                        if (username1.equals(lineFile[1])) {
                                            ok = 0;
                                            break;
                                        }
                                    }
                                }
                            } catch (IOException e) {
                                System.out.println("Error");
                            }

                            if (ok == 0)
                                System.out.println("{ 'status' : 'error', 'message' : 'The username to list followers was not valid'}");
                            else {
                                List<String> following = new ArrayList<>();
                                try (BufferedReader br = new BufferedReader(new FileReader("follow.csv"))) {
                                    String line;
                                    while ((line = br.readLine()) != null) {
                                        String[] lineFile = line.split(",");
                                        if (lineFile.length >= 2 && username1.equals(lineFile[0])) {
                                            String firstWord = lineFile[1].trim();
                                            following.add(firstWord);
                                        }
                                    }
                                } catch (IOException e) {
                                    System.out.println("Error");
                                }
                                System.out.print("{'status':'ok','message': [");
                                for (int i = 0; i < following.size(); i++) {
                                    System.out.print("'" + following.get(i) + "'");
                                    if (i < following.size() - 1) {
                                        System.out.print(",");
                                    }
                                }
                                System.out.println("]}");
                            }
                        }
                    }
                }
            }
        }
        if (command.equals("-get-most-liked-posts")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    List<String> linesWithIds = new ArrayList<>();
                    //citesc numarul de like-uri din fisier si le stochez in digitCounts
                    Map<Integer, Integer> digitCounts = getDigitCounts("likes.txt");
                    try (BufferedReader br = new BufferedReader(new FileReader("getmostliked.csv"))) {
                        String line;
                        int ID = 1;
                        List<Post> posts = new ArrayList<>();
                        while ((line = br.readLine()) != null) {
                            String[] parts = line.split(",");

                            if (parts.length >= 3) {
                                String usernameB = parts[0].trim();
                                int post_id = ID;
                                String post_text = parts[2].trim();
                                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                                String post_date = dateFormat.format(new Date());

                                posts.add(new Post(post_id, post_text, post_date, usernameB));
                            }
                            ID++;
                        }
                        StringBuilder jsonBuilder = new StringBuilder();
                        jsonBuilder.append("{'status':'ok','message': [");
                        for (Post post : posts) {
                            int numberOfLikes = calculateNumberOfLikes(post.post_id, digitCounts);
                            jsonBuilder.append("{'post_id':'").append(post.post_id).append("',")
                                    .append("'post_text':'").append(post.post_text).append("',")
                                    .append("'post_date':'").append(post.post_date).append("',")
                                    .append("'username':'").append(post.username).append("',")
                                    .append("'number_of_likes':'").append(numberOfLikes).append("'},");

                        }

                        if (jsonBuilder.charAt(jsonBuilder.length() - 1) == ',') {
                            jsonBuilder.deleteCharAt(jsonBuilder.length() - 1);
                        }

                        jsonBuilder.append(" ]}");

                        System.out.println(jsonBuilder);

                    } catch (IOException e) {
                        System.out.println("Error");
                    }
                }
            }
        }
        if (command.equals("-get-most-commented-posts")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    List<String> linesWithIds = new ArrayList<>();
                    Map<Integer, Integer> digitCounts = getDigitCountsforCSV("commentedPosts.csv");

                    try (BufferedReader br = new BufferedReader(new FileReader("postId.csv"))) {
                        String line;
                        int ID = 1;
                        List<Post> posts = new ArrayList<>();
                        while ((line = br.readLine()) != null) {
                            String[] parts = line.split(",");

                            if (parts.length >= 3) {
                                String usernameB = parts[0].trim();
                                int post_id = ID;
                                String post_text = parts[2].trim();

                                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                                String post_date = dateFormat.format(new Date());

                                posts.add(new Post(post_id, post_text, post_date, usernameB));
                            }
                            ID++;
                        }

                        StringBuilder jsonBuilder = new StringBuilder();
                        jsonBuilder.append("{'status':'ok','message': [");
                        for (Post post : posts) {
                            int numberOfLikes = calculateNumberOfLikes(post.post_id, digitCounts);
                            jsonBuilder.append("{'post_id':'").append(post.post_id).append("',")
                                    .append("'post_text':'").append(post.post_text).append("',")
                                    .append("'post_date':'").append(post.post_date).append("',")
                                    .append("'username':'").append(post.username).append("',")
                                    .append("'number_of_comments':'").append(numberOfLikes).append("'},");

                        }
                        if (jsonBuilder.charAt(jsonBuilder.length() - 1) == ',') {
                            jsonBuilder.deleteCharAt(jsonBuilder.length() - 1);
                        }
                        jsonBuilder.append("]}");
                        System.out.println(jsonBuilder);
                    } catch (IOException e) {
                        System.out.println("Error");
                    }
                }
            }
        }
        if (command.equals("-get-most-followed-users")) {
            if (password == null || username == null) // daca n am username sau parola
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) { // altfel deschid fisierul
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    String filePath = "follow.csv";
                    Map<String, Integer> followersCount = countFollowers(filePath);
                    //sortez in ordine descrescatoare dupa numarul de urmaritori
                    Map<String, Integer> sortedFollowersCount = followersCount.entrySet()
                            .stream()
                            .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1,
                                    LinkedHashMap::new));

                    StringBuilder jsonBuilder = new StringBuilder();
                    jsonBuilder.append("{'status':'ok','message': [");

                    for (Map.Entry<String, Integer> entry : sortedFollowersCount.entrySet()) {
                        String usernameF = entry.getKey();
                        int numberOfFollowers = entry.getValue();
                        jsonBuilder.append("{'username':'").append(usernameF).append("',")
                                .append("'number_of_followers':'").append(numberOfFollowers).append("'},");
                    }

                    if (jsonBuilder.charAt(jsonBuilder.length() - 1) == ',') {
                        jsonBuilder.deleteCharAt(jsonBuilder.length() - 1);
                    }
                    jsonBuilder.append(" ]}");
                    System.out.println(jsonBuilder);
                }
            }
        }
        if (command.equals("-get-most-liked-users")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (!password.equals(passFile)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    String file = "users.csv";
                    //vector pentru nume
                    List<String> namesList = new ArrayList<>();
                    try {
                        // obiect scanner pentru citirea fisieului
                        Scanner scanner = new Scanner(new File(file));
                        while (scanner.hasNextLine()) {
                            String line = scanner.nextLine();
                            String[] parts = line.split(",");
                            String name = parts[0].trim();
                            namesList.add(name);
                        }

                        scanner.close();

                    } catch (FileNotFoundException e) {
                        System.out.println("Error");
                    }
                    String filename = "likes.txt";
                    int maxNumber = 1000000;
                    //vector care stocheaza de cate ori apare fiecare numar in fisier
                    int[] numberCounts = new int[maxNumber + 1];
                    try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            int number = Integer.parseInt(line.trim());
                            numberCounts[number]++;
                        }

                    } catch (IOException e) {
                        System.out.println("Error");
                    }
                    List<Integer> sortedNumberList = new ArrayList<>();
                    //adaug in lista numarul de aparitii gasit pt fiecare numar
                    for (int i = 1; i < numberCounts.length; i++) {
                        if (numberCounts[i] > 0) {
                            sortedNumberList.add(i);
                        }
                    }
                    //sortare descrescatoare
                    sortedNumberList.sort((a, b) -> Integer.compare(numberCounts[b], numberCounts[a]));
                    //afisare nume in functie de numarul corespunzator
                    System.out.print("{'status':'ok','message': [");
                    for (int i = 0; i < sortedNumberList.size(); i++) {
                        int number = sortedNumberList.get(i);
                        String usernamex = namesList.get(number - 1);
                        int likes = numberCounts[number];
                        System.out.print("{'username':'" + usernamex + "','number_of_likes':'" + likes + "'}");
                        if (i < sortedNumberList.size() - 1) {
                            System.out.print(",");
                        }
                    }
                    System.out.print("]}");
                }
            }
        }
        if (command.equals("-get-post-details")) {
            if (password == null || username == null)
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            if (username != null && password != null) {
                try (BufferedReader br = new BufferedReader(new FileReader("users.csv"))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] lineFile = line.split(",");
                        if (lineFile.length >= 2) {
                            passFile = lineFile[1];
                            if (username.equals(lineFile[0])) {
                                userExists = true;
                                break;
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error");
                }
                if (!userExists) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else {
                    if (!password.equals(passFile)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else if (id == null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'No post identifier was provided'}");
                    } else {
                        try (BufferedReader br = new BufferedReader(new FileReader("postId.csv"))) {
                            String line;
                            while ((line = br.readLine()) != null) {
                                String[] lineFile = line.split(",");
                                if (lineFile.length >= 2) {
                                    idFile = lineFile[1];
                                    if (id.equals(lineFile[1])) {
                                        user1Exists = true;
                                        break;
                                    }
                                }
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                        if (!user1Exists) {
                            System.out.println("{ 'status' : 'error', 'message' : 'The post identifier was not valid'}");
                            try (FileWriter fw = new FileWriter("likes.txt", true);
                                 BufferedWriter bw = new BufferedWriter(fw);
                                 PrintWriter out = new PrintWriter(bw)) {
                                out.println(id);
                            } catch (IOException e) {
                                System.out.println("Error");
                            }
                        } else {
                            String filePathForPosts = "likesforposts.txt";
                            String filePathForComments = "likesforcomments.txt";
                            Map<Integer, Integer> digitCountsForPosts = getDigitCounts(filePathForPosts);
                            Map<Integer, Integer> digitCountsForComments = getDigitCounts(filePathForComments);

                            List<String[]> postsData = readCSV("postId.csv");
                            List<String[]> commentsData = readCSV("commentedPosts.csv");

                            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                            String currentDateAsString = sdf.format(new Date());

                            StringBuilder result = new StringBuilder("{'status':'ok','message': [");

                            for (String[] post : postsData) {
                                int postId = Integer.parseInt(post[1]);
                                int numberOfLikesForPosts = calculateNumberOfLikes(postId, digitCountsForPosts);

                                result.append("{'post_text':'").append(post[2]).append("','post_date':'")
                                        .append(currentDateAsString).append("','username':'").append(post[0])
                                        .append("','number_of_likes':'").append(numberOfLikesForPosts)
                                        .append("','comments': [");

                                for (String[] comment : commentsData) {
                                    if (comment[1].equals(post[1])) {
                                        int commentid = Integer.parseInt(comment[1]);
                                        int numberOfLikesForComments = calculateNumberOfLikes(commentid,
                                                digitCountsForComments);

                                        result.append("{'comment_id':'").append(comment[1]).append("','comment_text':'")
                                                .append(comment[2]).append("','comment_date':'")
                                                .append(currentDateAsString)
                                                .append("','username':'").append(comment[0])
                                                .append("','number_of_likes':'").append(numberOfLikesForComments)
                                                .append("'},");
                                    }
                                }
                                if (result.charAt(result.length() - 1) == ',') {
                                    result.deleteCharAt(result.length() - 1);
                                }
                                result.append("] },");
                            }
                            if (result.charAt(result.length() - 1) == ',') {
                                result.deleteCharAt(result.length() - 1);
                            }
                            result.append("] } ");
                            System.out.println(result);
                        }
                    }
                }
            }
        }
    }
}
